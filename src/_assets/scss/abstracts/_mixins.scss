@use "sass:map";
@use "sass:math";
@use "sass:string";
@use "variables" as *;

// Media Queries
// ------------------------------------------------
// 機能：メディアクエリ
// 引数：$type      どのような範囲を指定するか
//                  sp      SPサイズ
//                  pc      PCサイズ
// 使い方：「spサイズ」の場合は「@include mq() { }」
//        「pcサイズ」の場合は「@include mq(pc) { }」
// ------------------------------------------------
$spMaxPx: 768; // SPサイズの最大ピクセル数
@mixin mq($type: sp, $value1: $viewTablet) {
  // １つの値を使って範囲指定する場合
  $reverse: "";
  $widthType: "max";
  @if $type == pc {
    // PC用（spMaxサイズ < w）
    $reverse: "not";
  } @else {
    // SP用（w <= spMaxサイズ）
    // そのままでOK
  }
  @media #{$reverse} screen and (#{$widthType}-width: math.div($value1, 16) + em) {
    @content;
  }
}

@mixin min-max($min: $viewTablet, $max: $containerSize) {
  @media (min-width: math.div($min, 16) + em) and (max-width: math.div($max - 1, 16) + em) {
    @content;
  }
}

// ---------------------------------------------------------------------------
// Clearfix
// ---------------------------------------------------------------------------
@mixin clearfix() {
  &:after {
    display: block;
    clear: both;
    content: "";
  }
}

// ---------------------------------------------------------------------------
// hover
// ---------------------------------------------------------------------------
@mixin hover() {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
  &:focus-visible {
    @content;
  }
}

// ---------------------------------------------------------------------------
// 横幅をコンテンツ幅にして中央寄せ
// ---------------------------------------------------------------------------
@mixin cwLayout() {
  max-width: $contentsW;
  margin-right: auto;
  margin-left: auto;
}

// ---------------------------------------------------------------------------
// Hover時に要素を透明化
// ---------------------------------------------------------------------------
@mixin hoverOpacityEf($time: 0.5s, $opacity: 0.5) {
  a {
    transition: $time;
    &:hover {
      opacity: $opacity;
    }
  }
}

// カラーコード→RGB変換
@function toRgb($color) {
  @return red($color), green($color), blue($color);
}

@function toHsl($color) {
  // $red: red($color) / 255 ;
  // $green: green($color) / 255 ;
  // $blue: blue($color) / 255 ;
  // $max: math.max( $red, $green, $blue ) ;
  // $min: math.min( $red, $green, $blue ) ;
  // $diff: $max - $min;
  // $hue: 0;
  // $lightness: percentage(($max + $min) / 2) ;
  // $saturation: percentage($diff / ( 1 - ( math.abs( $max + $min - 1 ) ) )) ;
  // @if $min == $max {
  //   $hue: 0;
  // }
  // @else if $min == $red {
  //   $hue:  (60 * (($bulue - $green) / $diff)) + 180
  // }
  // @else if $min == $green {
  //   $hue: (60 * (($red - $blue) / $diff)) + 300 ;
  // }
  // @else if $min == $blue {
  //   $hue: (60 * (($green - $red) / $diff)) + 60 ;
  // }
  // @return hsl(var($hue, $saturation, $lightness));
  @return hsl(hue($color), saturation($color), lightness($color));
}

// CSS変数をRGBA関数で使えるようにする
@function getColor($color, $alpha: 1) {
  @return rgba(var(#{$color}), $alpha);
}

///-----------------boxshadow//
@mixin boxShadow($color: rgba($colorText, 0.25)) {
  box-shadow: 0 2.5rem 2rem -2rem $color;
}

///-----------------fontsize//
$pcDesign: 1280;
$spDesign: 375;
@mixin fontsize($pcSize: nth($baseFontSize, 1), $spSize: $pcSize) {
  // font-size: string.unquote(
  //   "clamp(#{math.div($spSize, 10) + rem},#{math.div(100, $pcDesign) * $pcSize}vw,#{math.div($pcSize, 10) + rem})"
  // );
  font-size: #{math.div($pcSize, 10) + rem};
  // font-size: math.div(100, $pcDesign) * $pcSize + vw;
  @include mq() {
    font-size: string.unquote(
      "clamp(#{math.div($spSize, 10) + rem},#{math.div(100, $spDesign) * $spSize}vw,#{math.div($pcSize, 10) + rem})"
    );
  }
}

//spフォントサイズ
@mixin spFont($spSize: nth($baseFontSize, 2), $pcSize: nth($baseFontSize, 1)) {
  @include mq() {
    font-size: unquote(
      "min(#{math.div(100, $viewSP) * $spSize}vw,#{math.div($pcSize * 2, 10) + rem})"
    );
  }
}

//spの余白などのサイズ
@function spSize($spSize: 1) {
  @return string.unquote(
    "min(#{math.div(100, $viewSP) * $spSize}vw,#{math.div($spSize * 2, 10) + rem})"
  );
}

@function pcSize($pcSize: 1) {
  @return string.unquote(
    "min(#{math.div(100, $pcDesign) * $pcSize}vw,#{math.div($pcSize * 1, 10) + rem})"
  );
}

///-----------------文字マーカー//
@mixin textMarker($color: $color01, $position: 75%) {
  line-height: 1.2 !important;
  background: linear-gradient(transparent 75%, $color 75%) !important;
}

///-----------------縁文字//
@mixin fillText($fillWidth: 1px, $fillColor: $colorTextReversal) {
  text-shadow: $fillWidth $fillWidth 0 $fillColor,
    -$fillWidth $fillWidth 0 $fillColor, -$fillWidth - $fillWidth 0 $fillColor,
    $fillWidth - $fillWidth 0 $fillColor, $fillWidth 0px 0 $fillColor,
    0px $fillWidth 0 $fillColor, -$fillWidth 0px 0 $fillColor,
    0px - $fillWidth 0 $fillColor, -2px 0 0 $fillColor, 0 -2px 0 $fillColor;
}

///-----------------gradation//
@mixin gradation($color: $color01, $color2: $color02, $border: 50%) {
  background: $color;
  background: linear-gradient(to right, $color $border, $color2 $border);
}

///-----------------CSSパターン//

@mixin bgCheck2($tartanColor: $fillColor, $checkSize: 50px 50px) {
  background-image: linear-gradient(
      to bottom,
      rgba($tartanColor, 0.5) 0%,
      rgba($tartanColor, 0.5) 30%,
      transparent 30%,
      transparent 33%,
      rgba($tartanColor, 0.5) 33%,
      rgba($tartanColor, 0.5) 40%,
      transparent 40%,
      transparent 80%,
      rgba($tartanColor, 0.3) 80%,
      rgba($tartanColor, 0.3) 96%,
      transparent 96%,
      transparent 100%
    ),
    linear-gradient(
      to right,
      rgba($tartanColor, 0.5) 0%,
      rgba($tartanColor, 0.5) 30%,
      transparent 30%,
      transparent 33%,
      rgba($tartanColor, 0.5) 33%,
      rgba($tartanColor, 0.5) 40%,
      transparent 40%,
      transparent 80%,
      rgba($tartanColor, 0.3) 80%,
      rgba($tartanColor, 0.3) 96%,
      transparent 96%,
      transparent 100%
    );
  background-repeat: repeat;
  background-size: $checkSize;
}

@mixin bgBorder($borderColor: #fff, $borderHeight: 5) {
  background-image: linear-gradient(
    $borderColor,
    $borderColor 50%,
    transparent 50%,
    transparent
  );
  background-repeat: repeat;
  background-size: $borderHeight + px $borderHeight + px;
}

@mixin bgDotted($dotsColor: #fff, $dotsSize: 10) {
  background-image: radial-gradient(
    circle farthest-side,
    $dotsColor,
    $dotsColor 45%,
    transparent 55%,
    transparent
  );
  background-repeat: repeat;
  background-size: $dotsSize + px $dotsSize + px;
}

@mixin bgStripe($stripeColor: #fff, $stripeWidth: 5) {
  background-image: linear-gradient(
    to right,
    $stripeColor,
    $stripeColor 50%,
    transparent 50%,
    transparent
  );
  background-repeat: repeat;
  background-size: $stripeWidth + px $stripeWidth + px;
}

@mixin bgCheck($checkColor: #fff, $checkWidth: 10) {
  background-image: linear-gradient(
      $checkColor,
      $checkColor 50%,
      transparent 50%,
      transparent
    ),
    linear-gradient(
      to right,
      $checkColor,
      $checkColor 50%,
      transparent 50%,
      transparent
    );
  background-repeat: repeat;
  background-size: $checkWidth + px $checkWidth + px;
}

@mixin bgSlash($slashColor: #fff, $slashWidth: 10) {
  background-image: linear-gradient(
    to right bottom,
    $slashColor,
    $slashColor 24%,
    transparent 26%,
    transparent 49%,
    $slashColor 51%,
    $slashColor 74%,
    transparent 76%,
    transparent
  );
  background-repeat: repeat;
  background-size: $slashWidth + px $slashWidth + px;
}

///-----------------矢印//
$root2: 1.41421356;
// ******************************************
// 機能：＞に設定すべきright&leftの値を取得
// 引数：$diameter 背景の円の直径
//      $borderLength ＞の一辺の長さ
//      $borderWidth ＞の線の太さ
//      $arrowWidth ＞の先っぽから-の末端までの長さ
// 返値：rightに指定すべき値（pxの単位付きで返す）
// ******************************************
@function getRightPoint_arrow(
  $diameter,
  $borderLength,
  $borderWidth,
  $arrowWidth
) {
  @return (
      math.div(
        ($root2 * $borderLength + $diameter - $borderLength - $arrowWidth),
        2
      )
    ) + px;
}
@function getLeftPoint_arrow(
  $diameter,
  $borderLength,
  $borderWidth,
  $arrowWidth
) {
  @return (math.div(($diameter - $arrowWidth), 2)) + px;
}
// ******************************************
// 概要：○の中に->がある装飾
// 引数：$diameter 背景の円の直径
//      $borderLength ＞の一辺の長さ
//      $borderWidth ＞の線の太さ
//      $arrowWidth ＞の先っぽから-の末端までの長さ
//      $circleColor 背景の円の色
//      $borderColor ＞の線の色
// ******************************************
@mixin arrow(
  $diameter,
  $borderLength,
  $borderWidth,
  $arrowWidth,
  $circleColor,
  $borderColor
) {
  position: relative;
  box-sizing: border-box;
  display: block;
  width: $diameter + px;
  height: $diameter + px;
  background: $circleColor;
  border-radius: 50%;

  &::before,
  &::after {
    position: absolute;
    top: 50%;
    box-sizing: border-box;
    display: block;
    content: "";
    transform-origin: center center;
  }

  &::before {
    right: getRightPoint_arrow(
      $diameter,
      $borderLength,
      $borderWidth,
      $arrowWidth
    );
    width: $borderLength + px;
    height: $borderLength + px;
    border-top: $borderWidth + px solid $borderColor;
    border-right: $borderWidth + px solid $borderColor;
    transform: translateY(-50%) rotate(45deg);
  }

  &::after {
    left: getLeftPoint_arrow(
      $diameter,
      $borderLength,
      $borderWidth,
      $arrowWidth
    );
    width: ($arrowWidth - $borderWidth) + px;
    height: $borderWidth + px;
    background: $borderColor;
    transform: translateY(-50%);
  }
}

//丸に三角//
// .-circleArrow {
//   position: relative;
//   margin-right: .5em;
//   padding: 0 0 0 1em;
//   text-align: center;

//   &:after {
//     content: '';
//     position: absolute;
//     top: 0;
//     right: 0;
//     bottom: 0;
//     left: 2px;
//     width: 0;
//     height: 0;
//     margin: auto;
//     border-width: 3px 0 3px 5.2px;
//     border-style: solid;
//     border-color: transparent transparent transparent $colorTextReversal;
//   }
//   &:before {
//     content: '';
//     position: absolute;
//     top: 0;
//     right: 0;
//     bottom: 0;
//     left: 0;
//     width: 15px;
//     height: 15px;
//     margin: auto;
//     border-radius: 50%;
//     background: $color01;
//   }
// }

//レスポンシブ丸//

// .-circle {
//   position: relative;
//   overflow: hidden;
//   padding: 50%;
//   border-radius: 50%;
//   background-color: $color01;

//   > span {
//     position: absolute;
//     top: 50%;
//     left: 0;
//     width: 100%;
//     margin: -.5em 0 0;
//     line-height: 1;
//     text-align: center;
//     color: $colorText;
//   }
//   > img {
//     position: absolute;
//     top: 0;
//     right: 0;
//     bottom: 0;
//     left: 0;
//     width: 100%;
//     height: 100%;
//     margin: auto;
//     object-fit: cover;
//     object-position: center;
//   }
// }
